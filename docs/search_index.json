[["index.html", "Statistical Computing Chapter 1 Reviews", " Statistical Computing YOUR NAME HERE 2024-10-15 Chapter 1 Reviews "],["functions.html", "Chapter 2 Functions 2.1 Types of Functions in R", " Chapter 2 Functions In programming, functions are like little blocks of code that perform a specific task. Think of them as reusable instructions that you can call whenever you need them. Here’s why functions are super helpful: Avoid repetition: Instead of writing the same code multiple times, you can just call the function. Cleaner code: Your code becomes easier to read and maintain because functions help organize it better. Easier debugging: When something goes wrong, you only need to check the function itself rather than searching through your entire program. Why Use Functions? Imagine having to rewrite a set of instructions every time you need them! With functions, you write the code once and reuse it as many times as you want. A good rule of thumb is: if you expect to run a specific set of instructions more than twice, create a function for it. What Can Functions Do? Functions are flexible and can be used for many different purposes: Take input (called arguments) Process the input based on what the function is meant to do Return a result after completing the task 2.1 Types of Functions in R In R, there are three main types of functions: User-Defined Functions (UDF) – Custom functions you write for your specific needs. Built-in functions – These come pre-loaded in R. Example: mean() Package functions – Functions from external R packages you can install. Example: ggplot() and select() from ggplot2 and dplyr respectively. 2.1.1 User-Defined Functions The best way to grasp how functions work in R is by creating your own! These are called* User-Defined Functions (UDFs), and they allow you to design custom tasks that fit your needs. In R, functions typically follow this format: function_name &lt;- function(argument_1, argument_2) { # Function body (your instructions go here) return(output) } Let’s break down the key elements: Function Name: This is how you’ll call your function later. When you create a function, you assign it a name and save it as a new object. For example, if you name your function calculate_mean, that’s the name you’ll use every time you want to run the function. Arguments (also called Parameters): Arguments are placed inside the parentheses. They tell the function what input to expect or how to modify its behavior. Think of them as placeholders for the data you’ll provide later when you run the function. Function Body: Inside the curly brackets {}, you’ll write the instructions that the function will follow to accomplish the task. This is the “heart” of the function. Return Statement: The return() function tells R what result to give you after the function finishes its job. It’s optional, but it helps if you want to store the function’s result in a variable. Let’s write a simple function that calculates the mean (average) of two numbers: mean_two_numbers &lt;- function(num_1, num_2) { mean &lt;- (num_1 + num_2) / 2 return(mean) } How to Use the Function: To find the mean of 10 and 20, simply call the function like this: mean_two_numbers(10, 20) ## [1] 15 Let’s add a few more simple tasks: writing a function that calculates the difference between two numbers. Why is this important? Well, imagine you have two values and you want to find their difference—that’s exactly what this function will help us do! # Function to calculate the difference between two numbers calculate_difference &lt;- function(x, y) { # Subtract the second number (y) from the first number (x) difference &lt;- x - y # Return the difference result so we can use it later return(difference) } You see!: x and y are our arguments: These are the two numbers we’ll use in our calculation. The subtraction happens inside the function: We simply subtract y from x and store the result in difference. Finally, we return the difference: This way, we can use the result when we call the function. Now, let’s put it to the test! We’ll run the function with different sets of numbers and see what we get: calculate_difference(10, 5) # 10 - 5 = 5 ## [1] 5 calculate_difference(25, 15) # 25 - 15 = 10 ## [1] 10 calculate_difference(50, 30) # 50 - 30 = 20 ## [1] 20 Notice how easy it is to calculate the difference between any two numbers by just calling our function? That’s the power of writing your own functions—they make life a lot easier! Now, lets make it more interesting! How about a function that greets you by name? We can do the same in R by creating a simple function that takes someone’s name and returns a greeting. Here is how we do it: # Function to greet a student by their name greet_student &lt;- function(student_name) { # Create a personalized greeting greeting &lt;- paste(&quot;Hello&quot;, student_name, &quot;!&quot;) # Return the greeting so we can use it later return(greeting) } Remember! We use student_name as the argument: This is where you pass in the name of the student. We combine \"Hello\" with the name: The paste() function(that is an -in-built function which will discuss later in the course) helps us put the pieces together to form a full sentence. Return the greeting: The function gives us back a customized message, ready to greet anyone! Lets try it out with different names greet_student(&quot;John&quot;) # Hello John! ## [1] &quot;Hello John !&quot; greet_student(&quot;Alice&quot;) # Hello Alice! ## [1] &quot;Hello Alice !&quot; greet_student(&quot;Michael&quot;) # Hello Michael! ## [1] &quot;Hello Michael !&quot; Remember to try it out with your name! Takeaway: By writing these two simple functions, you’ve already tackled a lot of important concepts in R! You now know: How to create a function. How to pass arguments (inputs/parameters) to a function. How to return a result that you can use later. Practical Exercise In this exercise, you’ll get hands-on practice creating your own functions in R. Follow the instructions below to write functions that perform specific tasks. Remember to test your functions with different input values! Create a function called add_numbers that takes two arguments, a and b, and returns their sum. Write a function named is_even that takes a single argument, num, and returns \"Even\" if the number is even, or \"Odd\" if it’s odd. Create a function called find_max that takes three arguments and returns the largest of the three numbers. Solution Create a function called add_numbers that takes two arguments, a and b, and returns their sum. # Function to calculate the sum of two numbers sum_two_numbers &lt;- function(x, y) { sum &lt;- x + y return(sum) } # Test the function with different values sum_two_numbers(5, 10) # Output: 15 ## [1] 15 sum_two_numbers(20, 30) # Output: 50 ## [1] 50 sum_two_numbers(100, 200) # Output: 300 ## [1] 300 Write a function named is_even that takes a single argument, num, and returns \"Even\" if the number is even, or \"Odd\" if it’s odd. # Function to check if a number is even or odd check_even_odd &lt;- function(number) { if (number %% 2 == 0) { return(&quot;Even&quot;) } else { return(&quot;Odd&quot;) } } # Test the function with different numbers check_even_odd(4) # Output: &quot;Even&quot; ## [1] &quot;Even&quot; check_even_odd(7) # Output: &quot;Odd&quot; ## [1] &quot;Odd&quot; check_even_odd(10) # Output: &quot;Even&quot; ## [1] &quot;Even&quot; Create a function called find_max that takes three arguments and returns the largest of the three numbers. # Function to find the maximum of three numbers max_of_three &lt;- function(a, b, c) { max_value &lt;- max(a, b, c) # Use the built-in max function return(max_value) # Return the maximum value } # Test the function with different values max_of_three(10, 20, 5) # Output: 20 ## [1] 20 max_of_three(3, 1, 2) # Output: 3 ## [1] 3 max_of_three(7, 15, 12) # Output: 15 ## [1] 15 ________________________________________________________________________________ "],["group-manipulation.html", "Chapter 3 Group Manipulation", " Chapter 3 Group Manipulation "],["general-statistics.html", "Chapter 4 General Statistics", " Chapter 4 General Statistics "],["simple-linear-regression.html", "Chapter 5 Simple Linear Regression", " Chapter 5 Simple Linear Regression "],["reproducibility-and-report-with-r-markdown.html", "Chapter 6 Reproducibility and Report with R Markdown", " Chapter 6 Reproducibility and Report with R Markdown "],["r-shiny-building-r-packages.html", "Chapter 7 R Shiny, Building R Packages", " Chapter 7 R Shiny, Building R Packages "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
